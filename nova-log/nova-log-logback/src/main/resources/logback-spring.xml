<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 先级排序: FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
    <!-- 日志颜色，使用%red(红色)，%green(绿色)，%yellow(黄色)直接包裹，比如：[traceId:%red(%X{traceId})] -->

    <springProperty scope="context" name="logPath" source="logging.file.path" defaultValue="logging.file.path"/>
    <property name="log.path" value="${logPath}"/>
    <property name="log.maxHistory" value="15"/>
    <!-- 表示单个日志文件的最大大小,这里设置为1024MB。当日志文件内容长度超过这个大小时,会进行轮转 -->
    <property name="log.maxFileSize" value="10240MB"/>

    <!-- 同步打印，可以打印方法和行号 -->
    <property name="log.pattern" value="%d{MM-dd HH:mm:ss-SSS} [%t] [traceId:%X{TraceId}] [spanId:%X{SpanId}] %-5level %logger{20} - [%method,%line] - %msg%n"/>

    <!-- 异步打印，因为默认不开启打印方法和行数 -->
    <property name="log.pattern.async" value="%d{MM-dd HH:mm:ss-SSS} [%t] [traceId:%X{traceId}] [spanId:%X{spanId}] %-5level %logger{20} - %msg%n"/>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志消息格式设置 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${log.pattern.async}</pattern>
        </encoder>
    </appender>

    <!-- 系统info日志输出 -->
    <appender name="info_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/info.log</file>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/info.log</fileNamePattern>
            <!-- 日志最大的历史 -->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern.async}</pattern>
        </encoder>
        <!-- 过滤掉所有日志级别低于INFO级别的日志事件 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 系统warn日志输出 -->
    <appender name="warn_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/debug.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 系统error日志输出 -->
    <appender name="error_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/error.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步控制台输出  -->
    <appender name="async_console" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 打印栈堆信息 开启性能降低和同步一样效果-->
<!--        <includeCallerData>true</includeCallerData>-->
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="console" />
    </appender>

    <!-- 异步info级别输出  -->
    <appender name="async_info" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="info_log" />
    </appender>

    <!-- 系统模块日志级别控制  debug级别及以上 -->
    <logger name="com.nova.log.logback" level="debug"/>

    <!-- Spring日志级别控制  warn级别及以上 -->
    <logger name="org.springframework" level="warn"/>

    <!-- 定义控制台日志，debug及以上日志级别的异步输出 -->
    <root level="debug">
        <appender-ref ref="async_console"/>
    </root>

    <!-- 定义服务器日志 -->
    <root level="info">
        <appender-ref ref="async_info"/>
        <appender-ref ref="warn_log"/>
        <appender-ref ref="error_log"/>
    </root>

</configuration>