1.定义数据类型的时候用封装类型，“钱”用BigDecimal类型

2.BigDecimal舍0
new BigDecimal(x).stripTrailingZeros().toPlainString()

3.数据库时间查出来带有.0，DATE_FORMAT( coi.grant_time, '%Y-%c-%d %H:%i:%s' ) AS customTime,

4.判断集合不为null或为[ ]用CollectionUtils.isNotEmpty(list)

5.判断字符串不为null或为“”Preconditions.checkArgument(StringUtils.isNotBlank(str), "msg");

6.数据库数据的区别 空值，null值，null

7.//使用java正则表达式去掉多余的.与0
protected static String subZeroAndDot(double discount){
    String s = String.valueOf(discount);
    if(s.indexOf(".") > 0){
        s = s.replaceAll("0+?$", "");//去掉多余的0
        s = s.replaceAll("[.]$", "");//如最后一位是.则去掉
    }
    return s;
}

8.用户登录流程
（1）校验手机格式，校验用户信息，验证码发送计数，生成随机6位验证码，发送短信，缓存用户信息和验证码。

 （2）取缓存验证手机号和验证码是否匹配，判断是否注册，

8.Java随机生成6位数字   String.valueOf(new Random().nextInt(899999) + 100000);


9.防重规范，幂等设计。幂等:在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。
使用场景例如：短信，电话，邮件，下单，支付，验证码等等;幂等主要手段就是通过表中的唯一约束实现。
幂等设计1
表中的【请求ID】字段如何设计，一般没有明确幂等条件的话，直接设计成UUID
String uuid = UUID.randomUUID().toString().replace("-", "").toLowerCase();UUID最少在3000+年内不会重复。

什么情况会发多次相同数据
（1）系统重试导致。分布式系统下，上游系统有失败重发机制，可能导致数据重复发送人为导致。
（2）多人操作同条数据时，可能导致重复数据。


10.数据库相关知识
（1）`ID` bigint(20) NOT NULL AUTO_INCREMENT   不为空并且主键自增
（2）`update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间'   时间不为空并且修改后自动变更
（3） PRIMARY KEY (`id`),有两个作用，一是约束作用（constraint），用来规范一个存储主键和唯一性，但同时也在此key上建立了一个主键索引；
约束：唯一标识数据库表中的每条记录；主键必须包含唯一的值；主键列不能包含 NULL 值；每个表都应该有一个主键，并且每个表只能有一个主键。（PRIMARY KEY 拥有自动定义的 UNIQUE 约束）
（3）UNIQUE KEY;也有两个作用，一是约束作用（constraint），规范数据的唯一性，但同时也在这个key上建立了一个唯一索引；
UNIQUE 约束：唯一标识数据库表中的每条记录。UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。
（每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束）
(4)key 是数据库的物理结构，它包含两层意义和作用，一是约束（偏重于约束和规范数据库的结构完整性），二是索引（辅助查询用的）。





